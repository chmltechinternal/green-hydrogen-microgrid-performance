import streamlit as st
import plotly.graph_objects as go
import filters

# Page setup
st.set_page_config(page_title="Exploratory Data Analysis", page_icon="ðŸ“Š", layout="wide")

st.title('Exploratory Data Analysis')

df = filters.load_data()
dataframes = [df]
filters.initialize_filters(dataframes)
filters.display_filters()
filtered_df = filters.apply_filters(df)

# Main dashboard
st.markdown("## Green Hydrogen Microgrid Performance Dashboard")

st.markdown("""
This dashboard analyzes hourly data from a microgrid<sup>1</sup> system, including:

- **Photovoltaic (PV) Production**: Amount of sunlight-converted electricity from solar panels
- **Load Demand**: Total power required by the connected electricity collection loads
- **Hydrogen Production/Usage**: Amount of hydrogen produced/used for/from energy storage in the microgrid
- **System Efficiencies**: Efficiency percentage in hydrogen fuel cells or backup generators and electrolyzers for storing excess energy
""", unsafe_allow_html=True)

st.markdown("### Average Summary")

st.markdown("""
This gives an average summary of the PV, Load Demand, Hydrogen and Fuel Cell Output in a given month/hour range.
""")

# Top row metrics
col1, col2, col3, col4 = st.columns(4)

with col1:
   avg_pv = filtered_df['PV Production (kWh)'].mean()
   st.metric("Avg PV Production", f"{avg_pv:.2f} kWh")

with col2:
   avg_load = filtered_df['Load Demand (kWh)'].mean()
   st.metric("Avg Load Demand", f"{avg_load:.2f} kWh")

with col3:
   avg_h2_prod = filtered_df['Hydrogen Production (kg)'].mean()
   st.metric("Avg Hâ‚‚ Production", f"{avg_h2_prod:.2f} kg")

with col4:
   avg_fc_output = filtered_df['Fuel Cell Output (kWh)'].mean()
   st.metric("Avg Fuel Cell Output", f"{avg_fc_output:.2f} kWh")

# Energy Balance Chart
st.markdown("### Energy Balance Overview")

st.markdown("""
This shows a breakdown of the PV production, load demand and grid import (electricity imported from the main power grid) in weekly intervals that are dependent on the month/hour filter as well.

""")

energy_fig = go.Figure()

energy_fig.add_trace(go.Scatter(
   x=filtered_df['DateTime'],
   y=filtered_df['PV Production (kWh)'],
   name='PV Production',
   line=dict(color='#FFA500')
))

energy_fig.add_trace(go.Scatter(
   x=filtered_df['DateTime'],
   y=filtered_df['Load Demand (kWh)'],
   name='Load Demand',
   line=dict(color='#FF0000')
))

energy_fig.add_trace(go.Scatter(
   x=filtered_df['DateTime'],
   y=filtered_df['Energy Imported from Grid (kWh)'],
   name='Grid Import',
   line=dict(color='#00FF00')
))

energy_fig.update_layout(
   xaxis_title='Date',
   yaxis_title='Energy (kWh)',
   hovermode='x unified'
)

st.plotly_chart(energy_fig, use_container_width=True)

# Hydrogen System Charts
st.markdown("### Hygrogen Production and Usage")

st.markdown("""

This compares hydrogen production to fuel cell usage in weekly intervals that are dependent on the month/hour filter as well.

""")
h2_fig = go.Figure()
h2_fig.add_trace(go.Scatter(
      x=filtered_df['DateTime'],
      y=filtered_df['Hydrogen Production (kg)'],
      name='Hâ‚‚ Production',
      line=dict(color='#0000FF')
))
h2_fig.add_trace(go.Scatter(
      x=filtered_df['DateTime'],
      y=filtered_df['Hydrogen Supply to Fuel Cell (kg)'],
      name='Hâ‚‚ to Fuel Cell',
      line=dict(color='#800080')
))
h2_fig.update_layout(
      title='Hydrogen Production and Usage',
      xaxis_title='Date',
      yaxis_title='Hydrogen (kg)',
      hovermode='x unified'
)
st.plotly_chart(h2_fig, use_container_width=True)

st.markdown("### System Efficiencies")

st.markdown("""
This compares electrolyzer and fuel cell efficiencies in weekly intervals that are dependent on the month/hour filter as well. Fuel efficiencies are measured using the output energy (energy generated by the grid) divided by the input energy (stored energy in the fuel cell). The higher the fuel efficiency, the less fuel is needed for operations, resulting in lower emissions.

For electrolyzer efficiencies, they are measured using the heating value of hydrogen produced divided by the energy input (consumption). The higher the electrolyzer efficiency, the more electricity that can be converted into hydrogen.
""")

eff_fig = go.Figure()
eff_fig.add_trace(go.Scatter(
      x=filtered_df['DateTime'],
      y=filtered_df['Electrolyser Efficiency (%)'],
      name='Electrolyzer Eff.',
      line=dict(color='#4B0082')
))
eff_fig.add_trace(go.Scatter(
      x=filtered_df['DateTime'],
      y=filtered_df['Fuel Cell Electrical Efficiency (%)'],
      name='Fuel Cell Eff.',
      line=dict(color='#008080')
))
eff_fig.update_layout(
      title='System Efficiencies',
      xaxis_title='Date',
      yaxis_title='Efficiency (%)',
      hovermode='x unified'
)
st.plotly_chart(eff_fig, use_container_width=True)

# Daily Patterns section
st.markdown("### Daily Operating Patterns")

st.markdown("""
Here, a 24-Hour Energy profile shows a comparison of the average PV production and load demand, broken down hourly, dependent on the month/hour range filter as well.
""")

# Calculate daily averages
daily_avg = filtered_df.groupby(filtered_df['DateTime'].dt.hour).agg({
   'PV Production (kWh)': 'mean',
   'Load Demand (kWh)': 'mean',
   'Hydrogen Production (kg)': 'mean',
   'Fuel Cell Output (kWh)': 'mean'
}).reset_index()

# Daily patterns visualization
daily_fig = go.Figure()
daily_fig.add_trace(go.Scatter(
   x=daily_avg['DateTime'],
   y=daily_avg['PV Production (kWh)'],
   name='Avg PV Production',
   line=dict(color='#FFA500')
))
daily_fig.add_trace(go.Scatter(
   x=daily_avg['DateTime'],
   y=daily_avg['Load Demand (kWh)'],
   name='Avg Load Demand',
   line=dict(color='#FF0000')
))

daily_fig.update_layout(
   title='24-Hour Energy Profile',
   xaxis_title='Hour of Day',
   yaxis_title='Energy (kWh)',
   hovermode='x unified'
)

st.plotly_chart(daily_fig, use_container_width=True)

# System Summary Metrics
st.markdown("### System Performance Summary")

st.markdown("""
Here,  a total of the imported vs exported energy is given, with the average hydrogen storage weight and overall average system efficiency as well; again, dependent on the month/hour range filter. As the exported energy is the energy that is generated by the microgrid being sent back to the main grid (potentially earning revenue on the energy sales), emphasis is put on this number to monitor any change. The average hydrogen storage is the average hydrogen discharge to storage in kilograms and the average system efficiency is the average eletrolyzser efficiency, as again, that shows the efficiency of the conversion of electricity to hydrogen.
""")

col1, col2, col3 = st.columns(3)

with col1:
   avg_export = filtered_df['Energy Exported to Grid (kWh)'].mean()
   avg_import = filtered_df['Energy Imported from Grid (kWh)'].mean()
   st.metric("Grid Export vs Import", 
             f"Export: {avg_export:.1f} kWh",
             f"Import: {avg_import:.1f} kWh")

with col2:
   avg_h2_storage = filtered_df['Hydrogen Discharge to Storage (kg)'].mean()
   st.metric("Avg Hâ‚‚ Storage", f"{avg_h2_storage:.2f} kg")

with col3:
   avg_sys_eff = filtered_df['Electrolyser Efficiency (%)'].mean()
   st.metric("Avg System Efficiency", f"{avg_sys_eff:.1f}%")


st.markdown('<br/><br/><br/><span style="font-size: 12px;"><sup>1</sup> Power network that relies on nearby energy sources</span>', unsafe_allow_html=True)